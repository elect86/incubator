/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.functions.function;

import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * Container class for
 * higher-<a href="https://en.wikipedia.org/wiki/Arity">arity</a>
 * {@link Function}-style functional interfaces&mdash;i.e. with functional
 * method {@code apply} with a number of arguments corresponding to the arity.
 * <ul>
 * <li>For 0-arity (nullary) functions, use {@link Producer} (and notice the
 * functional method there is named {@link Producer\#create()}).</li>
 * <li>For 1-arity (unary) functions, use {@link Function}.</li>
 * <li>For 2-arity (binary) functions, use {@link BiFunction}.</li>
 * </ul>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public final class Functions {

	private Functions() {
		// NB: Prevent instantiation of utility class.
	}

#foreach($arity in $arities)
	/**
	 * A ${arity}-arity specialization of {@link Function}.
	 *
#foreach($a in [1..$arity])
	 * @param <I${a}> the type of argument $a to the function
#end
	 * @param <O> the type of the output of the function
	 * @see Function
	 */
	@FunctionalInterface
	public interface Arity${arity}$generics.call($arity) {

		/**
		 * Applies this function to the given arguments.
		 *
#foreach($a in [1..$arity])
		 * @param in$a function argument $a
#end
		 * @return the function output
		 */
		O apply($applyParams.call($arity));

		/**
		 * Returns a composed function that first applies this function to its
		 * input, and then applies the {@code after} function to the result. If
		 * evaluation of either function throws an exception, it is relayed to the
		 * caller of the composed function.
		 *
		 * @param <O2> the type of output of the {@code after} function, and of the
		 *          composed function
		 * @param after the function to apply after this function is applied
		 * @return a composed function that first applies this function and then
		 *         applies the {@code after} function
		 * @throws NullPointerException if after is null
		 */
		default <O2> Arity${arity}$genericsO2.call($arity) andThen(Function<? super O, ? extends O2> after)
		{
			Objects.requireNonNull(after);
			return ($applyParams.call($arity)) -> after.apply(apply($applyArgs.call($arity)));
		}
	}

#end
	// TODO: clean
//	public interface ArityN<O> {
//
//		O apply(Object... ins);
//
//		Object getOp();
//	}
//
//	protected static class Arity0AsN<O> implements ArityN<O> {
//
//		Producer<O> func;
//
//		public Arity0AsN(Producer<O> func) {
//			this.func = func;
//		}
//
//		@Override
//		public O apply(Object... ins) {
//			return func.create();
//		}
//
//		@Override
//		public Object getOp() {
//			return func;
//		}
//
//	}

#foreach($arity in [1..$maxArity])
//	protected static class Arity${arity}AsN<O> implements ArityN<O> {
//
//		$functionArity.call($arity)$objectGenerics.call($arity) func;
//
//		public Arity${arity}AsN($functionArity.call($arity)$objectGenerics.call($arity) func) {
//			this.func = func;
//		}
//
//		@Override
//		public O apply(Object... ins) {
//			return func.apply($insArgs.call($arity));
//		}
//
//		@Override
//		public Object getOp() {
//			return func;
//		}
//
//	}

#end
}
