/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.api;

import java.lang.reflect.Type;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.function.Producer;
import org.scijava.types.Nil;
import org.scijava.types.Types;

/**
 * Convenience class for looking up and/or executing ops using a builder
 * pattern.
 * <p>
 * TODO: Examples
 * </p>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public class OpBuilder {

	private final OpEnvironment env;
	private final String opName;

	public OpBuilder(final OpEnvironment env, final String opName) {
		this.env = env;
		this.opName = opName;
	}

	/** Specifies an op that accepts no inputs&mdash;i.e., a nullary op. */
	public Arity0 arity0() { return new Arity0(); }

#foreach($arity in $arities)
	/** Specifies an op with $arity input#if ( $arity > 1)s#end. */
	public Arity${arity} arity${arity}() { return new Arity${arity}(); }


#end
	// -- Helper methods --

	@SuppressWarnings({ "unchecked" })
	private <T> Nil<T> type(Object obj) {
		// FIXME: This vacuous T and unsafe cast is wrong.
		return (Nil<T>) Nil.of(env.genericType(obj));
	}

	private void checkComputerRefs(Object... objects) {
		checkRefs(objects.length - 1, "Output", objects);
	}

	private void checkInplaceRefs(int inplaceNo, Object... objects) {
		checkRefs(inplaceNo - 1, "Mutable input " + inplaceNo, objects);
	}

	private void checkRefs(int mutableIndex, String label, Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i == mutableIndex) continue;
			if (objects[mutableIndex] == objects[i]) {
				throw new IllegalArgumentException(label +
					" cannot be same reference as input #" + (i + 1));
			}
		}
	}

	// @formatter:off
	/*
	 * -- HELPER CLASSES --
	 * 
	 * For each arity, there are multiple conditions:
	 * * Input TYPES are given (IT) 
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: none
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: none
	 *  
	 * * Input VALUES are given (IV) (N.B. this case applies for Arity0):
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: apply, mutate
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: apply
	 * 	3) The output value is given (OV): 
	 * 		a) matchable: Computer
	 *  	b) runnable: compute
	 */
	// @formatter:on

	/**
	 * Builder with arity 0, output unspecified.
	 *
	 * @author Curtis Rueden
	 */
	public final class Arity0 {

		/**
		 * Match a {@link org.scijava.function.Computers} op that can use the given pre-allocated output instance.
		 *
		 * @see #create
		 * @see #outType
		 * @see #[[#outType(Nil)]]#
		 * @see #producer
		 */
		public <O> Arity0_OV<O> output(final O out) {
			return new Arity0_OV<>(out);
		}

		/**
		 * Match an op using the indicated output class.
		 *
		 * @see #create
		 * @see #output
		 * @see #[[#outType(Nil)]]#
		 * @see #producer
		 */
		public <O> Arity0_OT<O> outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		/**
		 * Match an op using the indicated output class, with generic parameter(s) preserved.
		 *
		 * @see #create
		 * @see #output
		 * @see #outType
		 * @see #producer
		 */
		public <O> Arity0_OT<O> outType(final Nil<O> outType) {
			return new Arity0_OT<>(outType);
		}

		/**
		 * Match a type-unsafe {@link org.scijava.function.Producer} op.
		 *
		 * @see #create
		 * @see #output
		 * @see #outType
		 * @see #[[#outType(Nil)]]#
		 */
		public Producer<?> producer() {
			final Nil<Producer<Object>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] {
						Object.class });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], Nil.of(
				Object.class));
		}

		/**
		 * As {@link #producer}, but match using the provided {@code Hints}.
		 */
		public Producer<?> producer(final Hints hints) {
			final Nil<Producer<Object>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] {
						Object.class });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], Nil.of(
				Object.class, hints));
		}

		/**
		 * Directly run the matched type-unsafe {@link org.scijava.function.Producer} op and get its output.
		 *
		 * @see #output
		 * @see #outType
		 * @see #[[#outType(Nil)]]#
		 * @see #producer
		 *
		 * @return The {@code Object} created by this op
		 */
		public Object create() {
			return producer().create();
		}

		/**
		 * As {@link #create}, but match using the provided {@code Hints}.
		 */
		public Object create(final Hints hints) {
			return producer(hints).create();
		}
	}

	/**
	 * Builder with arity 0, output type given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OT<O> {

		private final Nil<O> outType;

		public Arity0_OT(final Nil<O> outType) {
			this.outType = outType;
		}

		/**
		 * Match a type-safe {@link org.scijava.function.Producer} op.
		 *
		 * @see #computer
		 * @see #create
		 */
		public Producer<O> producer() {
			final Nil<Producer<O>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], outType);
		}

		/**
		 * As {@link #producer}, but match with the provided {@code Hints}.
		 */
		public Producer<O> producer(final Hints hints) {
			final Nil<Producer<O>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], outType, hints);
		}

		/**
		 * Match a {@link org.scijava.function.Computers} op to work with pre-allocated output.
		 *
		 * @see #create
		 * @see #producer
		 */
		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, outType);
		}

		/**
		 * As {@link #computer}, but match using the provided {@code Hints}.
		 */
		public Computers.Arity0<O> computer(Hints hints) {
			return matchComputer(env, opName, outType, hints);
		}

		/**
		 * Directly run the matched {@link org.scijava.function.Producer} op and get its output.
		 *
		 * @see #computer
		 * @see #producer
		 *
		 * @return The {@code O} created by this op
		 */
		public O create() {
			return producer().create();
		}

		/**
		 * As {@link #create}, but match using the provided {@code Hints}.
		 *
		 * @return The {@code O} created by this op
		 */
		public O create(Hints hints) {
			return producer(hints).create();
		}
	}

	/**
	 * Builder with arity 0, output value given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OV<O> {

		private final O out;

		public Arity0_OV(final O out) {
			this.out = out;
		}

		/**
		 * @return An instance of the matched {@link org.scijava.function.Computers} op, e.g. for reuse.
		 *
		 * @see #compute
		 */
		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, type(out));
		}

		/**
		 * As {@link #computer}, but match using the provided {@code Hints}.
		 */
		public Computers.Arity0<O> computer(final Hints hints) {
			return matchComputer(env, opName, type(out), hints);
		}

		/**
		 * Directly run the matched op on the provided output container.
		 *
		 * @see #computer
		 */
		public void compute() {
			computer().compute(out);
		}

		/**
		 * As {@link #compute}, but match using the provided {@code Hints}.
		 */
		public void compute(final Hints hints) {
			computer(hints).compute(out);
		}

	}

#foreach($arity in $arities)

	/**
	 * Builder with arity $arity, no input or output information provided.
	 *
	 * @author Mark Hiner
	 */
	public final class Arity${arity} {

		/**
		 * Specifies an op with $arity input#if ( $arity > 1)s#end, matched by input value.
		 *
		 * @see #inType
		 * @see #[[#inType]]#(#foreach( $i in [1..$arity] )Nil#if( $arity > 1 && $i < $arity ), #end#end)
		 */
		public $genericsWithoutOutput.call($arity) Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) input($inputObjectsArgs.call($arity))
		{
			return new Arity${arity}_IV_OU<>($inputObjects.call($arity));
		}

		/**
		 * Specifies an op with $arity input#if ( $arity > 1)s#end, matched by input type.
		 *
		 * @see #input
		 * @see #[[#inType]]#(#foreach( $i in [1..$arity] )Nil#if( $arity > 1 && $i < $arity ), #end#end)
		 */
		public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputClassesArgs.call($arity))
		{
			return inType($inputClassesToTypes.call($arity));
		}

		/**
		 * Specifies an op with $arity input#if ( $arity > 1)s#end, matched by input type with generics preserved.
		 *
		 * @see #input
		 * @see #inType
		 */
		public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputTypesArgs.call($arity))
		{
			return new Arity${arity}_IT_OU<>($inputTypes.call($arity));
		}

	}
#end


#foreach($arity in $arities)
	/**
	 * Builder with arity $arity, input type given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IT_OT$generics.call($arity) {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end
		private final Nil<O> outType;

		public Arity${arity}_IT_OT($inputTypesArgsWithOutput.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
			this.outType = outType;
		}

		/**
		 * Match a {@link org.scijava.function.Functions} op to produce an instance of this builder's {@code outType}.
		 *
		 * @see #computer
		 */
		public $functionArity.call($arity)$generics.call($arity) function() {
			return matchFunction(env, opName, $inputTypesWithOutput.call($arity));
		}

		/**
		 * As {@link #function}, but match using the provided {@code Hints}.
		 */
		public $functionArity.call($arity)$generics.call($arity) function(final Hints hints) {
			return matchFunction(env, opName, $inputTypesWithOutput.call($arity), hints);
		}

		/**
		 * Match a {@link org.scijava.function.Computers} op to work with pre-allocated output.
		 *
		 * @see #function
		 */
		public Computers.Arity${arity}$generics.call($arity) computer() {
			return matchComputer(env, opName, $inputTypesWithOutput.call($arity));
		}

		/**
		 * As {@link #computer}, but match using the provided {@code Hints}.
		 */
		public Computers.Arity${arity}$generics.call($arity) computer(final Hints hints) {
			return matchComputer(env, opName, $inputTypesWithOutput.call($arity), hints);
		}

	}

	/**
	 * Builder with arity $arity, input type given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end

		public Arity${arity}_IT_OU($inputTypesArgs.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
		}

		/**
		 * Match an op using the indicated output class.
		 *
		 * @see #function
		 * @see #inplace#if ( $arity > 1 )1#end
		 * @see #[[#outType(Nil)]]#
		 */
		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		/**
		 * Match an op using the indicated output class, with generic parameter(s) preserved.
		 *
		 * @see #function
		 * @see #inplace#if ( $arity > 1 )1#end
		 * @see #outType
		 */
		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IT_OT<>($inputTypesWithOutput.call($arity));
		}

		/**
		 * Match a {@link org.scijava.function.Functions} op to produce an output of unknown type.
		 *
		 * @see #outType
		 * @see #[[#outType(Nil)]]#
		 * @see #inplace#if ( $arity > 1 )1#end
		 */
		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return matchFunction(env, opName, $inputTypes.call($arity), Nil.of(Object.class));
		}

		/**
		 * As {@link #function}, but match using the provided {@code Hints}.
		 */
		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function(final Hints hints) {
			return matchFunction(env, opName, $inputTypes.call($arity), Nil.of(Object.class), hints);
		}

#foreach($a in [1..$arity])
		/**
		 * Match an {@link org.scijava.function.Inplaces} op to mutate the $a#if ( $a == 1 )st#elseif ( $a == 2 )nd#elseif ( $a == 3 )rd#{else}th#end parameter.
		 *
		 * @see #function
		 * @see #outType
		 * @see #[[#outType(Nil)]]#
		 */
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			return $matchName.call($arity, $a)(env, opName, $inputTypes.call($arity));
		}

#end
#foreach($a in [1..$arity])
		/**
		 * As {@link #inplace#if ( $arity > 1 )$a#end}, but match using the provided {@code Hints}.
		 */
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}(final Hints hints) {
			return $matchName.call($arity, $a)(env, opName, $inputTypes.call($arity), hints);
		}

#end
	}

	/**
	 * Builder with arity ${arity}, input value given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IV_OT$generics.call($arity) {

#foreach($a in [1..$arity])
		private final I$a in${a};
#end
		private final Nil<O> outType;

		public Arity${arity}_IV_OT($inputObjectsArgs.call($arity), final Nil<O> outType)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.outType = outType;
		}

		public $functionArity.call($arity)$generics.call($arity) function() {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), outType);
		}
	
		public $functionArity.call($arity)$generics.call($arity) function(final Hints hints) {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), outType, hints);
		}
	
		public Computers.Arity${arity}$generics.call($arity) computer() {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), outType);
		}

		public Computers.Arity${arity}$generics.call($arity) computer(final Hints hints) {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), outType, hints);
		}
	
		public O apply() {
			return function().apply($inputObjects.call($arity));
		}

		public O apply(final Hints hints) {
			return function(hints).apply($inputObjects.call($arity));
		}
	}

	/**
	 * Builder with arity $arity, input value given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end

		public Arity${arity}_IV_OU($inputObjectsArgs.call($arity))
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
		}

		public <O> Arity${arity}_IV_OV$generics.call($arity) output(final O out) {
			checkComputerRefs($inputObjects.call($arity), out);
			return new Arity${arity}_IV_OV<>($inputObjects.call($arity), out);
		}

		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IV_OT<>($inputObjects.call($arity), outType);
		}

		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), Nil.of(Object.class));
		}

		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function(final Hints hints) {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), Nil.of(Object.class), hints);
		}

#foreach($a in [1..$arity])
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			checkInplaceRefs($a, $inputObjects.call($arity));
			return matchInplace${inplaceMatchNumber.call($arity, $a)}(env, opName, $inputTypesFromArgs.call($arity));
		}

#end
#foreach($a in [1..$arity])
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}(final Hints hints) {
			checkInplaceRefs($a, $inputObjects.call($arity));
			return matchInplace${inplaceMatchNumber.call($arity, $a)}(env, opName, $inputTypesFromArgs.call($arity), hints);
		}

#end
		public Object apply() {
			return function().apply($inputObjects.call($arity));
		}

		public Object apply(final Hints hints) {
			return function(hints).apply($inputObjects.call($arity));
		}

#foreach($a in [1..$arity])
		public void mutate${inplaceMatchNumber.call($arity, $a)}() {
			inplace${inplaceMatchNumber.call($arity, $a)}().mutate($inputObjects.call($arity));
		}

#end
#foreach($a in [1..$arity])
		public void mutate${inplaceMatchNumber.call($arity, $a)}(final Hints hints) {
			inplace${inplaceMatchNumber.call($arity, $a)}(hints).mutate($inputObjects.call($arity));
		}

#end
	}

	/**
	 * Builder with arity $arity, input value given, output value given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OV${generics.call($arity)} {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end
		private final O out;

		public Arity${arity}_IV_OV($inputObjectsArgs.call($arity), final O out)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.out = out;
		}

		public Computers.Arity${arity}${generics.call($arity)} computer() {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), type(out));
		}

		public void compute() {
			computer().compute($inputObjects.call($arity), out);
		}

		public Computers.Arity${arity}${generics.call($arity)} computer(final Hints hints) {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), type(out), hints);
		}

		public void compute(final Hints hints) {
			computer(hints).compute($inputObjects.call($arity), out);
		}

	}
#end

#foreach($arity in [0..$maxArity])
	@SuppressWarnings({ "unchecked" })
	public static $generics.call($arity) $functionArity.call($arity)$generics.call($arity) matchFunction(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity))
	{
		return matchFunctionHelper(env, opName, ${functionArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
#foreach($arity in [0..$maxArity])
	@SuppressWarnings({ "unchecked" })
	public static $generics.call($arity) $functionArity.call($arity)$generics.call($arity) matchFunction(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity), final Hints hints)
	{
		return matchFunctionHelper(env, opName, hints, ${functionArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}

#foreach($arity in [0..$maxArity])
	@SuppressWarnings("unchecked")
	public static $generics.call($arity) $computerArity.call($arity)$generics.call($arity) matchComputer(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity))
	{
		return matchComputerHelper(env, opName, ${computerArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
#foreach($arity in [0..$maxArity])
	@SuppressWarnings("unchecked")
	public static $generics.call($arity) $computerArity.call($arity)$generics.call($arity) matchComputer(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity), final Hints hints)
	{
		return matchComputerHelper(env, opName, hints, ${computerArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Hints hints, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType, hints);
	}

#foreach($arity in $arities)
#foreach($a in [1..$arity])
	@SuppressWarnings({ "unchecked" })
	public static $inplaceGenerics.call($arity, $a) $inplaceType.call($arity, $a)$inplaceGenerics.call($arity, $a) $matchName.call($arity, $a)(final OpEnvironment env, final String opName, $matchParams.call($arity, $a))
	{
		return matchInplaceHelper(env, opName, ${inplaceClass.call($arity, $a)}, ioType, new Nil[] {${basicParams.call($arity, $a)}});
	}

#end
#end

#foreach($arity in $arities)
#foreach($a in [1..$arity])
	@SuppressWarnings({ "unchecked" })
	public static $inplaceGenerics.call($arity, $a) $inplaceType.call($arity, $a)$inplaceGenerics.call($arity, $a) $matchName.call($arity, $a)(final OpEnvironment env, final String opName, $matchParams.call($arity, $a), final Hints hints)
	{
		return matchInplaceHelper(env, opName, hints, ${inplaceType.call($arity, $a)}.class, ioType, new Nil[] {${basicParams.call($arity, $a)}});
	}

#end
#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}
}
