/*
 * #%L
 * ImageJ2 software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2023 ImageJ2 developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package net.imagej.ops2.adapt.complexLift;

import net.imglib2.Dimensions;
import net.imglib2.img.Img;
import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Producer;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpDependency;

import java.util.function.BiFunction;
import java.util.function.Function;

public class ComputersToFunctionsAndLift {

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I>
	 *            Type of the first image
	 * @param <O>
	 *            Type of the second image
	 *@implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer1ToFunction1AndLiftViaSource<I, O>
			implements Function<Computers.Arity1<I, O>, Function<Img<I>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity1<I, O>, Computers.Arity1<Img<I>, Img<O>>> lifter;
		@OpDependency(name = "create", adaptable = false)
		BiFunction<Dimensions, O, Img<O>> createImgFromDimsAndType;
		@OpDependency(name = "create", adaptable = false)
		Producer<O> outTypeProducer;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Function<Img<I>, Img<O>> apply(Computers.Arity1<I, O> computer) {
			O outType = outTypeProducer.get();
			Computers.Arity1<Img<I>, Img<O>> lifted = lifter.apply(computer);
			return (inImg) -> {
				Img<O> outImg = createImgFromDimsAndType.apply(inImg, outType);
				lifted.compute(inImg, outImg);
				return outImg;
			};
		}

	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer2ToFunction2AndLiftViaSource<I1, I2, O>
			implements Function<Computers.Arity2<I1, I2, O>, BiFunction<Img<I1>, Img<I2>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity2<I1, I2, O>, Computers.Arity2<Img<I1>, Img<I2>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity2<Img<I1>, Img<I2>, Img<O>>, BiFunction<Img<I1>, Img<I2>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public BiFunction<Img<I1>, Img<I2>, Img<O>> apply(Computers.Arity2<I1, I2, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer3ToFunction3AndLiftViaSource<I1, I2, I3, O>
			implements Function<Computers.Arity3<I1, I2, I3, O>, Functions.Arity3<Img<I1>, Img<I2>, Img<I3>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity3<I1, I2, I3, O>, Computers.Arity3<Img<I1>, Img<I2>, Img<I3>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity3<Img<I1>, Img<I2>, Img<I3>, Img<O>>, Functions.Arity3<Img<I1>, Img<I2>, Img<I3>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity3<Img<I1>, Img<I2>, Img<I3>, Img<O>> apply(Computers.Arity3<I1, I2, I3, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer4ToFunction4AndLiftViaSource<I1, I2, I3, I4, O>
			implements Function<Computers.Arity4<I1, I2, I3, I4, O>, Functions.Arity4<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity4<I1, I2, I3, I4, O>, Computers.Arity4<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity4<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<O>>, Functions.Arity4<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity4<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<O>> apply(Computers.Arity4<I1, I2, I3, I4, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer5ToFunction5AndLiftViaSource<I1, I2, I3, I4, I5, O>
			implements Function<Computers.Arity5<I1, I2, I3, I4, I5, O>, Functions.Arity5<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity5<I1, I2, I3, I4, I5, O>, Computers.Arity5<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity5<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<O>>, Functions.Arity5<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity5<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<O>> apply(Computers.Arity5<I1, I2, I3, I4, I5, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer6ToFunction6AndLiftViaSource<I1, I2, I3, I4, I5, I6, O>
			implements Function<Computers.Arity6<I1, I2, I3, I4, I5, I6, O>, Functions.Arity6<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity6<I1, I2, I3, I4, I5, I6, O>, Computers.Arity6<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity6<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<O>>, Functions.Arity6<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity6<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<O>> apply(Computers.Arity6<I1, I2, I3, I4, I5, I6, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer7ToFunction7AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, O>
			implements Function<Computers.Arity7<I1, I2, I3, I4, I5, I6, I7, O>, Functions.Arity7<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity7<I1, I2, I3, I4, I5, I6, I7, O>, Computers.Arity7<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity7<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<O>>, Functions.Arity7<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity7<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<O>> apply(Computers.Arity7<I1, I2, I3, I4, I5, I6, I7, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer8ToFunction8AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, O>
			implements Function<Computers.Arity8<I1, I2, I3, I4, I5, I6, I7, I8, O>, Functions.Arity8<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity8<I1, I2, I3, I4, I5, I6, I7, I8, O>, Computers.Arity8<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity8<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<O>>, Functions.Arity8<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity8<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<O>> apply(Computers.Arity8<I1, I2, I3, I4, I5, I6, I7, I8, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer9ToFunction9AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>
			implements Function<Computers.Arity9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>, Functions.Arity9<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>, Computers.Arity9<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity9<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<O>>, Functions.Arity9<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity9<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<O>> apply(Computers.Arity9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer10ToFunction10AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>
			implements Function<Computers.Arity10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>, Functions.Arity10<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>, Computers.Arity10<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity10<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<O>>, Functions.Arity10<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity10<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<O>> apply(Computers.Arity10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer11ToFunction11AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>
			implements Function<Computers.Arity11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>, Functions.Arity11<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>, Computers.Arity11<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity11<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<O>>, Functions.Arity11<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity11<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<O>> apply(Computers.Arity11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <I12>
	 *            Type of the twelfth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer12ToFunction12AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>
			implements Function<Computers.Arity12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>, Functions.Arity12<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>, Computers.Arity12<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity12<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<O>>, Functions.Arity12<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity12<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<O>> apply(Computers.Arity12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <I12>
	 *            Type of the twelfth image
	 * @param <I13>
	 *            Type of the thirteenth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer13ToFunction13AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>
			implements Function<Computers.Arity13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>, Functions.Arity13<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>, Computers.Arity13<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity13<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<O>>, Functions.Arity13<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity13<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<O>> apply(Computers.Arity13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <I12>
	 *            Type of the twelfth image
	 * @param <I13>
	 *            Type of the thirteenth image
	 * @param <I14>
	 *            Type of the fourteenth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer14ToFunction14AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>
			implements Function<Computers.Arity14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>, Functions.Arity14<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>, Computers.Arity14<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity14<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<O>>, Functions.Arity14<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity14<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<O>> apply(Computers.Arity14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <I12>
	 *            Type of the twelfth image
	 * @param <I13>
	 *            Type of the thirteenth image
	 * @param <I14>
	 *            Type of the fourteenth image
	 * @param <I15>
	 *            Type of the fifteenth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer15ToFunction15AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>
			implements Function<Computers.Arity15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>, Functions.Arity15<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>, Computers.Arity15<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity15<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<O>>, Functions.Arity15<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity15<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<O>> apply(Computers.Arity15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I1>
	 *            Type of the first image
	 * @param <I2>
	 *            Type of the second image
	 * @param <I3>
	 *            Type of the third image
	 * @param <I4>
	 *            Type of the fourth image
	 * @param <I5>
	 *            Type of the fifth image
	 * @param <I6>
	 *            Type of the sixth image
	 * @param <I7>
	 *            Type of the seventh image
	 * @param <I8>
	 *            Type of the eighth image
	 * @param <I9>
	 *            Type of the ninth image
	 * @param <I10>
	 *            Type of the tenth image
	 * @param <I11>
	 *            Type of the eleventh image
	 * @param <I12>
	 *            Type of the twelfth image
	 * @param <I13>
	 *            Type of the thirteenth image
	 * @param <I14>
	 *            Type of the fourteenth image
	 * @param <I15>
	 *            Type of the fifteenth image
	 * @param <I16>
	 *            Type of the sixteenth image
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer16ToFunction16AndLiftViaSource<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>
			implements Function<Computers.Arity16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>, Functions.Arity16<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<I16>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>, Computers.Arity16<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<I16>, Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity16<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<I16>, Img<O>>, Functions.Arity16<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<I16>, Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Functions.Arity16<Img<I1>, Img<I2>, Img<I3>, Img<I4>, Img<I5>, Img<I6>, Img<I7>, Img<I8>, Img<I9>, Img<I10>, Img<I11>, Img<I12>, Img<I13>, Img<I14>, Img<I15>, Img<I16>, Img<O>> apply(Computers.Arity16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}
}
