/*
 * #%L
 * ImageJ2 software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2023 ImageJ2 developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package net.imagej.ops2.adapt.complexLift;

import net.imglib2.Dimensions;
import net.imglib2.img.Img;
import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Producer;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpDependency;

import java.util.function.BiFunction;
import java.util.function.Function;

public class ComputersToFunctionsAndLift {

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
	 * @param <I>
	 *            Type of the first image
	 * @param <O>
	 *            Type of the second image
	 *@implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer1ToFunction1AndLiftViaSource<I, O>
			implements Function<Computers.Arity1<I, O>, Function<Img<I>, Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity1<I, O>, Computers.Arity1<Img<I>, Img<O>>> lifter;
		@OpDependency(name = "create", adaptable = false)
		BiFunction<Dimensions, O, Img<O>> createImgFromDimsAndType;
		@OpDependency(name = "create", adaptable = false)
		Producer<O> outTypeProducer;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public Function<Img<I>, Img<O>> apply(Computers.Arity1<I, O> computer) {
			O outType = outTypeProducer.get();
			Computers.Arity1<Img<I>, Img<O>> lifted = lifter.apply(computer);
			return (inImg) -> {
				Img<O> outImg = createImgFromDimsAndType.apply(inImg, outType);
				lifted.compute(inImg, outImg);
				return outImg;
			};
		}

	}
#foreach($arity in $arities)

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on Imgs.
	 *
#foreach($a in [1..$arity])
	 * @param <I$a>
	 *            Type of the $arityNames.call($a) image
#end
	 * @param <O>
	 *            Type of the output image
	 * @implNote op names='adapt', priority='-100.'
	 */
	public static class ImgComputer${arity}ToFunction${arity}AndLiftViaSource<#foreach($a in [1..$arity])I$a,#if($a < $arity) #end#end O>
			implements Function<Computers.Arity$arity<#foreach($a in [1..$arity])I$a,#if($a < $arity) #end#end O>, $functionNames.call($arity)<#foreach($a in [1..$arity])Img<I$a>,#if($a < $arity) #end#end Img<O>>>,
			Op
	{
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity${arity}<#foreach($a in [1..$arity])I$a,#if($a < $arity) #end#end O>, Computers.Arity${arity}<#foreach($a in [1..$arity])Img<I$a>,#if($a < $arity) #end#end Img<O>>> lifter;
		@OpDependency(name = "adapt", adaptable = false)
		Function<Computers.Arity${arity}<#foreach($a in [1..$arity])Img<I$a>,#if($a < $arity) #end#end Img<O>>, $functionNames.call($arity)<#foreach($a in [1..$arity])Img<I$a>,#if($a < $arity) #end#end Img<O>>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public $functionNames.call($arity)<#foreach($a in [1..$arity])Img<I$a>,#if($a < $arity) #end#end Img<O>> apply(Computers.Arity$arity<#foreach($a in [1..$arity])I$a,#if($a < $arity) #end#end O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}
#end
}
