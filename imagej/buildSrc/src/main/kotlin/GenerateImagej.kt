import ops2Adapt.complexLift.ComputersToFunctionsAndLift
import ops2Adapt.complexLift.FunctionsToComputersAndLift
import ops2Adapt.LiftComputersToImg
import ops2Adapt.LiftFunctionsToImg
import org.gradle.api.DefaultTask
import org.gradle.api.file.Directory
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

abstract class GenerateImagej : DefaultTask() {

    init {
        group = "build"
    }

    @get:Input
    var isMain: Boolean = true

    @get:Input
    val srcPath get() = "generated/src/" + if (isMain) "main" else "test"

    @get:OutputDirectory
    val target: Provider<Directory>
        get() = project.layout.buildDirectory.dir(srcPath)

    @TaskAction
    fun generate() {
        val src = project.layout.buildDirectory.get().asFile.resolve(srcPath).apply { mkdirs() }
        when (project.name.drop("imagej-".length)) {
            "ops2" -> when {
                isMain -> {
                    ComputersToFunctionsAndLift(src)
                    FunctionsToComputersAndLift(src)
                    LiftComputersToImg(src)
                    LiftFunctionsToImg(src)
                }
            }
        }
    }
}
fun <T> Iterable<T>.joinToStringComma(lastComma: Boolean = true, transform: ((T) -> CharSequence)? = null): String {
    val joint = joinTo(StringBuilder(), transform = transform).toString()
    return joint + when {
        lastComma -> ", "
        else -> ""
    }
}

val license = """/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */"""

val dontEdit = """/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/"""